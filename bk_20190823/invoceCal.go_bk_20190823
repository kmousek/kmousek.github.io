package service

import (
	"encoding/json"
	"errors"
	"strconv"
	"time"

	//"encoding/json"
	//"errors"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	"strings"
	//c "github.com/main/go/controller"
	c "../controller"
	//"github.com/main/go/jsonStruct"
	"../jsonStruct"
)

//commitment 모델 확인해서 추가 정산금액 확인 function
func InvoiceCalcCommitment(stub shim.ChaincodeStubInterface, invoice *jsonStruct.Invoice) (error){
	/*
			type InvoiceInfo struct {
				InvoicedAmount       InvoicedAmount `json:"InvoicedAmount"`
				TapCal             	 TapCal   		`json:"TapCal"`
				AgreeSubCharge       string         `json:"AgreeSubCharge"`
				CommitmentTotalRate  string         `json:"Commitment_totalRate"`
				CommitmentPeriodRate string         `json:"Commitment_periodRate"`
			}

		   1. acitive계약 조회하여 계약 기간의 마지막 달인지 확인
	       2. 확인해서 마지막 달이 아니면 AgreeSubCharge는 0
	       3. 마지막 달이면 AgreeSubCharge 계산
	           계산방식은 사업자별로 상이,,,,
	       4. CommitmentTotalRate 계산
	       5. CommitmentPeriodRate 계산
	 */

	//active 계약 조회
	var sActContract jsonStruct.ContractForCal
	var sNowDate string
	var err error
	var sCtrtStDate string
	var sCtrtEdDate string
	var stInvoice jsonStruct.Invoice
	var f64TotalPostTaxAmount float64
	var stCalcSpcl []jsonStruct.CalcSpcl
	var bAllServicesFlag bool
	var bMocLocalFlag bool
	var bMocHomeFlag bool
	var bMocIntFlag bool
	var bMTCFlag bool
	var bSmsMoFlag bool
	var bSmsMtFlag bool
	var bGPRSFlag bool


	bAllServicesFlag = false
	bMocLocalFlag = false
	bMocHomeFlag = false
	bMocIntFlag = false
	bMTCFlag = false
	bSmsMoFlag = false
	bSmsMtFlag = false
	bGPRSFlag = false

	sNowDate = invoice.InvoiceDate+"01" //invoice사용월에 01을 붙임


	sActContract, err = Contract_getActive(stub, sNowDate, invoice.VPMN, invoice.HPMN)
	if err != nil{
		Log_add("Agreement_getActive 조회오류")
	}

	//계약 시작일자
	if sActContract.ContractInfo.Past.ContDtl.CONTSTDATE == gNotExgtValue {  //"null"
		sCtrtStDate = sActContract.ContractInfo.Current.ContDtl.CONTSTDATE
	}else{
		if sActContract.ContractInfo.Past.ContDtl.CONTSTDATE < sActContract.ContractInfo.Current.ContDtl.CONTSTDATE {
			sCtrtStDate = sActContract.ContractInfo.Past.ContDtl.CONTSTDATE
		}else{
			sCtrtStDate = sActContract.ContractInfo.Current.ContDtl.CONTSTDATE
		}
	}

	//계약 종료일자
	if sActContract.ContractInfo.Past.ContDtl.CONTEXPDATE == gNotExgtValue {  //"null"
		sCtrtEdDate = sActContract.ContractInfo.Current.ContDtl.CONTEXPDATE
	}else{
		if sActContract.ContractInfo.Past.ContDtl.CONTEXPDATE < sActContract.ContractInfo.Current.ContDtl.CONTEXPDATE {
			sCtrtEdDate = sActContract.ContractInfo.Past.ContDtl.CONTEXPDATE
		}else{
			sCtrtEdDate = sActContract.ContractInfo.Current.ContDtl.CONTEXPDATE
		}
	}

	Log_add("sCtrtStDate : ["+sCtrtStDate+"], sCtrtEdDate : ["+sCtrtEdDate+"]")

	stCalcSpcl = sActContract.ContractInfo.Current.ContDtl.CalcSpcl

	//commitment check
	for i:=0;i<len(stCalcSpcl);i++{
		if stCalcSpcl[i].MODELTYPECD == gModelTypeCommit{ //commitmen
			for j:=0;j<len(stCalcSpcl[i].CALLTYPECD);j++{
				if stCalcSpcl[i].CALLTYPECD[j] == gCallTypeAll{
					bAllServicesFlag = true
					break
				}
				if stCalcSpcl[i].CALLTYPECD[j] == gCallTypeMocLocal{
					bMocLocalFlag = true
				}
				if stCalcSpcl[i].CALLTYPECD[j] == gCallTypeMocHome{
					bMocHomeFlag = true
				}
				if stCalcSpcl[i].CALLTYPECD[j] == gCallTypeMocInt{
					bMocIntFlag = true
				}
				if stCalcSpcl[i].CALLTYPECD[j] == gCallTypeMtc{
					bMTCFlag = true
				}
				if stCalcSpcl[i].CALLTYPECD[j] == gCallTypeSmsMo{
					bSmsMoFlag = true
				}
				if stCalcSpcl[i].CALLTYPECD[j] == gCallTypeSmsMt{
					bSmsMtFlag = true
				}
				if stCalcSpcl[i].CALLTYPECD[j] == gCallTypeData{
					bGPRSFlag = true
				}
			}
		}
	}


	// invoice발행 내역 조회
  	/*
 		발행 대상 월은 인자값(invoce)로 넘어옴
 		계약시작월~ 발행 대상 월 이전월 까지 summary + invoice 해서 금액을 만들고
 		누적 달성률, 기간 달성률을 계산
  	 */


	tInvoiceUseDate, _ := time.Parse(time.RFC3339, invoice.UsedDate[:4]+"-"+invoice.UsedDate[5:7]+"-01T00:00:00Z")
	sInvoicePreDate := tInvoiceUseDate.AddDate(0,-1,0).Format("200601") //yyyymm

	Log_add("sInvoicePreDate" + sInvoicePreDate)

	//sQueryEndDate := time.Parse(time.RFC3339, "2006-01-02T15:04:05Z")

	queryMonthList := c.GetBetweenMonth(sCtrtStDate[:6], sInvoicePreDate)

	f64TotalPostTaxAmount = 0

	for i:=0;i<len(queryMonthList);i++{
		queryKey := []string{jsonStruct.Invoice_TYPE, invoice.VPMN, queryMonthList[i]}
		invoiceBytes, err := Block_Query(stub, queryKey)

		if invoiceBytes != nil {
			err = json.Unmarshal(invoiceBytes[0], &stInvoice)
			if err != nil{
				Log_add("json Unmarshal error")
				return errors.New("json Unmarshal error")
			}
			f64TotalPostTaxAmount = f64TotalPostTaxAmount + stInvoice.InvoiceInfo.InvoicedAmount.PostTaxAmount
		}else if err != nil && err.Error() == "wrong key data" {
			//no row selected
			Log_add("no row selected")
		}else if err != nil{
			Log_add("Invoice 조회 오류 : "+err.Error())
			return errors.New("Invoice 조회 오류")
		}
	}

	//현재 발행될 invoice 금액을 sum
	f64TotalPostTaxAmount = f64TotalPostTaxAmount + invoice.InvoiceInfo.InvoicedAmount.PostTaxAmount


	//계약의 마지막 달인지 체크 ( invoice사용월 == 계약 current의 종료월 )
	if invoice.InvoiceDate == sCtrtEdDate[:6] {
		//AgreeSubCharge 계산
	}else{
		invoice.InvoiceInfo.AgreeSubCharge = 0
	}

	// CommitmentTotalRate 계산
	/*
	  누적 달성률(%) : 현재까지 누적/commitment량 * 100
	  ex) 1년 commitment가 12만원이고, 4월 traffic까지 금액 합계가 4만원 일 경우
	     누적 달성률 : 33.3% = 4만/12만*100(소수점 둘째자리에서 반올림하여 첫째자리까지 표현)

	     commitment 금액 확인   --> contract
	     현재까지 정산 금액 확인 --> 계약별 누적량 조회하여 CalMonth기준으로 summary?
	*/
	//invoice.InvoiceInfo.CommitmentPeriodRate = custRound(f64TotalPostTaxAmount/)




}
